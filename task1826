package com.javarush.task.task18.task1826;

/* 
Шифровка
Придумать механизм шифровки/дешифровки.

Программа запускается с одним из следующих наборов параметров:
-e fileName fileOutputName
-d fileName fileOutputName

где:
fileName - имя файла, который необходимо зашифровать/расшифровать.
fileOutputName - имя файла, куда необходимо записать результат шифрования/дешифрования.
-e - ключ указывает, что необходимо зашифровать данные.
-d - ключ указывает, что необходимо расшифровать данные.


Требования:
1. Считывать с консоли ничего не нужно.
2. Создай поток для чтения из файла, который приходит вторым параметром ([fileName]).
3. Создай поток для записи в файл, который приходит третьим параметром ([fileOutputName]).
4. В режиме "-e" программа должна зашифровать [fileName] и записать в [fileOutputName].
5. В режиме "-d" программа должна расшифровать [fileName] и записать в [fileOutputName].
6. Созданные для файлов потоки должны быть закрыты.
*/

import java.io.*;

public class Solution {
    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        if (args[0].equals("-e")) {encrypt(args[1], args[2]);}
        if (args[0].equals("-d")) {decrypt(args[1], args[2]);}

    }

    public static void encrypt(String fileFrom, String fileTo) {
        try {
            FileInputStream fi = new FileInputStream(fileFrom);
            FileOutputStream fo = new FileOutputStream(fileTo);

            while (fi.available() > 0) {
                fo.write(fi.read()+1);}
            fi.close();
            fo.close();
        } catch (IOException e) { }
    }


    public static void decrypt(String fileFrom, String fileTo) {
        try {
            FileInputStream fi = new FileInputStream(fileFrom);
            FileOutputStream fo = new FileOutputStream(fileTo);

            while (fi.available() > 0) {
                fo.write(fi.read() - 1);}
            fi.close();
            fo.close();
        } catch (IOException e) {
        }
    }

}
