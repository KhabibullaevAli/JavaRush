package com.javarush.task.task18.task1828;

/* 
Прайсы 2

CrUD для таблицы внутри файла
Считать с консоли имя файла для операций CrUD

Программа запускается с одним из следующих наборов параметров:
-u id productName price quantity
-d id
-c productName price quantity

Значения параметров:
где id - 8 символов
productName - название товара, 30 символов
price - цена, 8 символов
quantity - количество, 4 символа
-u - обновляет данные товара с заданным id
-d - производит физическое удаление товара с заданным id (все данные, которые относятся к переданному id)
-c - добавляет товар с заданными параметрами в конец файла, генерирует id самостоятельно, инкрементируя максимальный id, найденный в файле.

В файле данные хранятся в следующей последовательности (без разделяющих пробелов):
id productName price quantity
Данные дополнены пробелами до их длины

Пример:
19847   Шорты пляжные синие           159.00  12
198479  Шорты пляжные черные с рисунко173.00  17
19847983Куртка для сноубордистов, разм10173.991234


Требования:
1. Программа должна считать имя файла для операций CrUD с консоли.
2. При запуске программы без параметров список товаров должен остаться неизменным.
3. При запуске программы с параметрами "-u id productName price quantity" должна обновится информация о товаре в файле.
4. При запуске программы с параметрами "-d id" строка товара с заданным id должна быть удалена из файла.
5. Созданные для файлов потоки должны быть закрыты.
*/

import java.io.*;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.Map;

public class Solution {
    static LinkedHashMap<Integer, String> map=new LinkedHashMap<>();
    public static void main(String[] args) throws Exception {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        try {
            String file = br.readLine();

            String arg[] = br.readLine().split(" ");

            br.close();
            switch (arg[0]){
                case "-c":{
                    createMap(file);
                    map.put(Collections.max(map.keySet())+1, (data(arg[1], arg[2], arg[3])));
                    writeMapToFile(file);
                    break;}
                case "-d":{
                    createMap(file);
                    map.remove(Integer.parseInt(arg[1]));
                    writeMapToFile(file);
                    break;}
                case "-u":{
                    createMap(file);

                    map.put(Integer.parseInt(arg[1]), data(arg[2],arg[3], arg[4]));
                    writeMapToFile(file);
                    break;}
            } } catch (Exception e) {
        }
    }


    public static void createMap(String fileName) {
        try {
            BufferedReader br = new BufferedReader(new FileReader(fileName));
            while (true) {
                String l = br.readLine();
                if (l == null) {break;}
                map.put(Integer.parseInt(l.substring(0, 8).replace(" ", "")), l.substring(8));
            }
            br.close();
        } catch (Exception e){}
    }


    public static void writeMapToFile(String fileName) {
        try {
            BufferedWriter fbw=new BufferedWriter(new FileWriter(fileName, false));

            for(Map.Entry<Integer, String> entry : map.entrySet()) {
                String newId=entry.getKey().toString();
                while (newId.length()<8){newId+=" ";}
                fbw.write(newId);
                fbw.write(entry.getValue());
                fbw.newLine();
            }
            fbw.close();
        } catch (Exception e){}
    }

    public static String data(String prName, String price, String quant){
        while (prName.length()<30){prName+=" ";}
        while (price.length()<8){price+=" ";}
        while (quant.length()<4){quant+=" ";}
        return (prName+price+quant);
    }
}
